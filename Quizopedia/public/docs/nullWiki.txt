https://en.wikibooks.org/wiki/Java_Programming/Literals/null
Literals

Java Literals are syntactic representations of boolean, character, numeric, or string data. Literals provide a means of expressing specific values in your program. For example, in the following statement, an integer variable named count is declared and assigned an integer value. The literal 0 represents, naturally enough, the value zero.
The code section 3.62 contains two number literals followed by two boolean literals at line 1, one string literal followed by one number literal at line 2, and one string literal followed by one real number literal at line 3:
Boolean Literals
There are two boolean literals
There are no other boolean literals, because there are no other boolean values!
Numeric Literals
There are three types of numeric literals in Java.
Integer Literals
In Java, you may enter integer numbers in several formats:
By default, the integer literal primitive type is int. If you want a long, add a letter el suffix (either the character l or the character L) to the integer literal. This suffix denotes a long integer rather than a standard integer. For example, 3405691582L is a long integer literal. Long integers are 8 bytes in length as opposed to the standard 4 bytes for int. It is best practice to use the suffix L instead of l to avoid confusion with the digit 1 (one) which looks like l in many fonts: 200l ? 2001. If you want a short integer literal, you have to cast it.
Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.
Floating Point Literals
Floating point numbers are expressed as decimal fractions or as exponential notation:
Floating point numbers consist of:
Here, integer digits represents one or more of the digits 0 through 9.
Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.
Character Literals
Character literals are constant valued character expressions embedded in a Java program. Java characters are sixteen bit Unicode characters, ranging from 0 to 65535. Character literals are expressed in Java as a single quote, the character, and a closing single quote ('a', '7', '$', '?'). Character literals have the type char, an unsigned integer primitive type. Character literals may be safely promoted to larger integer types such as int and long. Character literals used where a short or byte is called for must be cast to short or byte since truncation may occur.
String Literals
String literals consist of the double quote character (") (ASCII 34, hex 0x22), zero or more characters (including Unicode characters), followed by a terminating double quote character ("), such as: "Ceci est une string."
So a string literal follows the following grammar:
Within string and character literals, the backslash character can be used to escape special characters, such as unicode escape sequences, or the following special characters:
String literals may not contain unescaped newline or linefeed characters. However, the Java compiler will evaluate compile time expressions, so the following String expression results in a string with three lines of text:
null
null is a special Java literal which represents a null value: a value which does not refer to any object. It is an error to attempt to dereference the null value — Java will throw a NullPointerException. null is often used to represent uninitialized state.
Mixed Mode Operations
In concatenation operations, the values in brackets are concatenated first. Then the values are concatenated from the left to the right. Be careful when mixing character literals and integers in String concatenation operations:
The unexpected results arise because '1' and '0' are converted twice. The expression is concatenated as such:
The code section 66 yields the desired result:
Question 3.9: Consider the following code:
Explain the results seen.
For the first line:
For the second line:
For the last line:

