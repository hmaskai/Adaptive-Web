https://en.wikibooks.org/wiki/Java_Programming/Math
Mathematical functions

The java.lang.Math class allows the use of many common mathematical functions that can be used while creating programs.
Since it is in the java.lang package, the Math class does not need to be imported. However, in programs extensively utilizing these functions, a static import can be used.
Math constants
There are two constants in the Math class that are fairly accurate approximations of irrational mathematical numbers.
Math.E
The Math.E constant represents the value of Euler's number (e), the base of the natural logarithm.
Math.PI
The Math.PI constant represents the value of pi, the ratio of a circle's circumference to its diameter.
Math methods
Exponential methods
There are several methods in the Math class that deal with exponential functions.
Exponentiation
The power method, double Math.pow(double, double), returns the first parameter to the power of the second parameter. For example, a call to Math.pow(2, 10) will return a value of 1024 (210).
The Math.exp(double) method, a special case of pow, returns e to the power of the parameter. In addition, double Math.expm1(double) returns (ex - 1). Both of these methods are more accurate and convenient in these special cases.
Java also provides special cases of the pow function for square roots and cube roots of doubles, double Math.sqrt(double) and double Math.cbrt(double).
Logarithms
Java has no general logarithm function; when needed this can be simulated using the change-of-base theorem.
double Math.log(double) returns the natural logarithm of the parameter (not the common logarithm, as its name suggests!).
double Math.log10(double) returns the common (base-10) logarithm of the parameter.
double Math.log1p(double) returns ln(parameter+1). It is recommended for small values.
Trigonometric and hyperbolic methods
The trigonometric methods of the Math class allow users to easily deal with trigonometric functions in programs. All accept only doubles. Please note that all values using these methods are initially passed and returned in radians, not degrees. However, conversions are possible.
Trigonometric functions
The three main trigonometric methods are Math.sin(x), Math.cos(x), and Math.tan(x), which are used to find the sine, cosine, and tangent, respectively, of any given number. So, for example, a call to Math.sin(Math.PI/2) would return a value of about 1. Although methods for finding the cosecant, secant, and cotangent are not available, these values can be found by taking the reciprocal of the sine, cosine, and tangent, respectively. For example, the cosecant of pi/2 could be found using 1/Math.sin(Math.PI/2).
Inverse trigonometric functions
Java provides inverse counterparts to the trigonometric functions: Math.asin(x), and Math.acos(x), Math.atan(x).
Hyperbolic functions
In addition, hyperbolic functions are available: Math.sinh(x), Math.cosh(x), and Math.tanh(x).
Radian/degree conversion
To convert between degree and radian measures of angles, two methods are available, Math.toRadians(x) and Math.toDegrees(x). While using Math.toRadians(x), a degrees value must be passed in, and that value in radians (the degree value multiplied by pi/180) will be returned. The Math.toDegrees(x) method takes in a value in radians and the value in degrees (the radian value multiplied by 180/pi) is returned.
Absolute value: Math.abs
The absolute value method of the Math class is compatible with the int, long, float, and double types. The data returned is the absolute value of parameter (how far away it is from zero) in the same data type. For example:
In this example, result will contain a value of 3.
Maximum and minimum values
These methods are very simple comparing functions. Instead of using if...else statements, one can use the Math.max(x1, x2) and Math.min(x1, x2) methods. The Math.max(x1, x2) simply returns the greater of the two values, while the Math.min(x1, x2) returns the lesser of the two. Acceptable types for these methods include int, long, float, and double.
Functions dealing with floating-point representation
Java 1.5 and 1.6 introduced several non-mathematical functions specific to the computer floating-point representation of numbers.
Math.ulp(double) and Math.ulp(float) return an ulp, the smallest value which, when added to the argument, would be recognized as larger than the argument.
Math.copySign returns the value of the first argument with the sign of the second argument. It can be used to determine the sign of a zero value.
Math.getExponent returns (as an int) the exponent used to scale the floating-point argument in computer representation.
Rounding number example
Sometimes, we are not only interested in mathematically correct rounded numbers, but we want that a fixed number of significant digits are always displayed, regardless of the number used. Here is an example program that returns always the correct string. You are invited to modify it such that it does the same and is simpler!
The constant class contains repeating constants that should exist only once in the code so that to avoid inadvertent changes. (If the one constant is changed inadvertently, it is most likely to be seen, as it is used at several locations.)
The MathsUtils class is like an addition to the java.lang.Math class and contains the rounding calculations.
The code is tested with the following JUnit test:
The output of the JUnit test follows:
If you are interested in a comparison with C#, take a look at the rounding number example there. If you are interested in a comparison with C++, you can compare this code here with the same example over there.
Notice that in the expression starting with if ((D == 0), I have to use OR instead of the || because of a bug in the source template.
To do: Add some exercises like the ones in Variables
