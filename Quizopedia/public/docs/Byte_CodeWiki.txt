https://en.wikibooks.org/wiki/Java_Programming/Byte_Code
Java Programming/Byte Code
Java Byte Code is the language to which Java source is compiled and the Java Virtual Machine understands. Unlike compiled languages that have to be specifically compiled for each different type of computers, a Java program only needs to be converted to byte code once, after which it can run on any platform for which a Java Virtual Machine exists.
Bytecode is the compiled format for Java programs. Once a Java program has been converted to bytecode, it can be transferred across a network and executed by Java Virtual Machine (JVM). Bytecode files generally have a .class extension. It is not normally necessary for a Java programmer to know byte code, but it can be useful.


Other Languages
There are a number of exciting new languages being created that also compile to Java byte code, such as Groovy.

Example
Consider the following Java code.
A Java compiler might translate the Java code above into byte code as follows, assuming the above was put in a method:
Example 2
As an example we can write a simple Foo.java source:
Compile it and then move Foo.java to another directory or delete it if you wish. What can we do with javap and Foo.class ?
produces this result:
As you can see the javac compiler doesn't strip any (public) variable name from the .class file. As a result the names of the functions, their parameters and types of return are exposed. (This is necessary in order for other classes to access them.)
Let's do a bit more, try:
The Java bytecodes
See Oracle's Java Virtual Machine Specification[1] for more detailed descriptions
The manipulation of the operand stack is notated as [before]?[after], where [before] is the stack before the instruction is executed and [after] is the stack after the instruction is executed. A stack with the element 'b' on the top and element 'a' just after the top element is denoted 'a,b'.
References
External Links
